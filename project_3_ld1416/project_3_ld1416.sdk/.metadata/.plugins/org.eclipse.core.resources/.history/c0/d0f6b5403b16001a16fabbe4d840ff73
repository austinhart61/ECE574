/*
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xiomodule.h"
#include "xparameters.h"
#include "xil_io.h"
#include "sleep.h"


void write_char(int chunk, char digit[][9], char digit2[][9]){
	if(chunk & 0b00000000000000000000000000000001){
		digit[0][0] = '#';
		digit[0][1] = '#';
		digit[0][2] = '#';
		digit[0][3] = '#';
	}
	if(chunk & 0b00000000000000000000000000000010){
		digit[0][4] = '#';
		digit[0][5] = '#';
		digit[0][6] = '#';
		digit[0][7] = '#';
	}
	if(chunk & 0b00000000000000000000000000000100){
		digit[0][0] = '#';
		digit[1][0] = '#';
		digit[2][0] = '#';
		digit[3][0] = '#';
	}
	if(chunk & 0b00000000000000000000000000001000){
		digit[0][0] = '#';
		digit[1][1] = '#';
		digit[2][2] = '#';
		digit[3][3] = '#';
	}
	if(chunk & 0b00000000000000000000000000010000){
		digit[1][4] = '#';
		digit[2][4] = '#';
		digit[3][4] = '#';
	}
	if(chunk & 0b00000000000000000000000000100000){
		digit[3][5] = '#';
		digit[2][6] = '#';
		digit[1][7] = '#';
		digit[0][8] = '#';
	}
	if(chunk & 0b00000000000000000000000001000000){
		digit[0][8] = '#';
		digit[1][8] = '#';
		digit[2][8] = '#';
		digit[3][8] = '#';
	}
	if(chunk & 0b00000000000000000000000010000000){
		digit[4][0] = '#';
		digit[4][1] = '#';
		digit[4][2] = '#';
		digit[4][3] = '#';
	}
	if(chunk & 0b00000000000000000000000100000000){
		digit[4][5] = '#';
		digit[4][6] = '#';
		digit[4][7] = '#';
		digit[4][8] = '#';
	}
	if(chunk & 0b00000000000000000000001000000000){
		digit[5][0] = '#';
		digit[6][0] = '#';
		digit[7][0] = '#';
		digit[8][0] = '#';
	}
	if(chunk & 0b00000000000000000000010000000000){
		digit[5][3] = '#';
		digit[6][2] = '#';
		digit[7][1] = '#';
		digit[8][0] = '#';
	}
	if(chunk & 0b00000000000000000000100000000000){
		digit[5][4] = '#';
		digit[6][4] = '#';
		digit[7][4] = '#';
	}
	if(chunk & 0b00000000000000000001000000000000){
		digit[5][5] = '#';
		digit[6][6] = '#';
		digit[7][7] = '#';
		digit[8][8] = '#';
	}
	if(chunk & 0b00000000000000000010000000000000){
		digit[5][8] = '#';
		digit[6][8] = '#';
		digit[7][8] = '#';
		digit[8][8] = '#';
	}
	if(chunk & 0b00000000000000000100000000000000){
		digit[8][0] = '#';
		digit[8][1] = '#';
		digit[8][2] = '#';
		digit[8][3] = '#';
	}
	if(chunk & 0b00000000000000001000000000000000){
		digit[8][5] = '#';
		digit[8][6] = '#';
		digit[8][7] = '#';
		digit[8][8] = '#';
	}

	if(chunk & 0b00000000000000010000000000000000){
		digit2[0][0] = '#';
		digit2[0][1] = '#';
		digit2[0][2] = '#';
		digit2[0][3] = '#';
	}
	if(chunk & 0b00000000000000100000000000000000){
		digit2[0][4] = '#';
		digit2[0][5] = '#';
		digit2[0][6] = '#';
		digit2[0][7] = '#';
	}
	if(chunk & 0b00000000000001000000000000000000){
		digit2[0][0] = '#';
		digit2[1][0] = '#';
		digit2[2][0] = '#';
		digit2[3][0] = '#';
	}
	if(chunk & 0b00000000000010000000000000000000){
		digit2[0][0] = '#';
		digit2[1][1] = '#';
		digit2[2][2] = '#';
		digit2[3][3] = '#';
	}
	if(chunk & 0b00000000000100000000000000000000){
		digit2[1][4] = '#';
		digit2[2][4] = '#';
		digit2[3][4] = '#';
	}
	if(chunk & 0b00000000001000000000000000000000){
		digit2[3][5] = '#';
		digit2[2][6] = '#';
		digit2[1][7] = '#';
		digit2[0][8] = '#';
	}
	if(chunk & 0b00000000010000000000000000000000){
		digit2[0][8] = '#';
		digit2[1][8] = '#';
		digit2[2][8] = '#';
		digit2[3][8] = '#';
	}
	if(chunk & 0b00000000100000000000000000000000){
		digit2[4][0] = '#';
		digit2[4][1] = '#';
		digit2[4][2] = '#';
		digit2[4][3] = '#';
	}
	if(chunk & 0b00000001000000000000000000000000){
		digit2[4][5] = '#';
		digit2[4][6] = '#';
		digit2[4][7] = '#';
		digit2[4][8] = '#';
	}
	if(chunk & 0b00000010000000000000000000000000){
		digit2[5][0] = '#';
		digit2[6][0] = '#';
		digit2[7][0] = '#';
		digit2[8][0] = '#';
	}
	if(chunk & 0b00000100000000000000000000000000){
		digit2[5][3] = '#';
		digit2[6][2] = '#';
		digit2[7][1] = '#';
		digit2[8][0] = '#';
	}
	if(chunk & 0b00001000000000000000000000000000){
		digit2[5][4] = '#';
		digit2[6][4] = '#';
		digit2[7][4] = '#';
	}
	if(chunk & 0b00010000000000000000000000000000){
		digit2[5][5] = '#';
		digit2[6][6] = '#';
		digit2[7][7] = '#';
		digit2[8][8] = '#';
	}
	if(chunk & 0b00100000000000000000000000000000){
		digit2[5][8] = '#';
		digit2[6][8] = '#';
		digit2[7][8] = '#';
		digit2[8][8] = '#';
	}
	if(chunk & 0b01000000000000000000000000000000){
		digit2[8][0] = '#';
		digit2[8][1] = '#';
		digit2[8][2] = '#';
		digit2[8][3] = '#';
	}
	if(chunk & 0b10000000000000000000000000000000){
		digit2[8][5] = '#';
		digit2[8][6] = '#';
		digit2[8][7] = '#';
		digit2[8][8] = '#';
	}
}

void draw_frame(u32* chunk1, u32* chunk2){
//	print("\r\n================\r\n");
//	xil_printf("c1: %u \r\n c2: %u\r\n", *chunk1, *chunk2);
//	print("================\r\n");

	char digit[9][9] = {{' '}};
	char digit2[9][9] = {{' '}};
	char digit3[9][9] = {{' '}};
	char digit4[9][9] = {{' '}};

	write_char(*chunk1, digit, digit2);
	write_char(*chunk2, digit3, digit4);

	for (int i = 0; i < 9; i++){
		for(int j = 0; j < 9; j++){
			if(digit[i][j] == '#'){
				printf("%c", digit[i][j]);
			}
			else{
				printf(" ");
			}
		}
		for(int k = 0; k < 9; k++){
			if(digit2[i][k] == '#'){
				printf("%c", digit[i][k]);
			}
			else{
				printf(" ");
			}
		}
		for(int l = 0; l < 9; l++){
			if(digit3[i][j] == '#'){
				printf("%c", digit[i][l]);
			}
			else{
				printf(" ");
			}
		}
		for(int m = 0; m < 9; m++){
			if(digit4[i][j] == '#'){
				printf("%c", digit[i][m]);
			}
			else{
				printf(" ");
			}
		}
		printf("\n");
	}
}

int main()
{
    init_platform();

    u32 chars01, chars02;

    XIOModule iomodule; // iomodule variable for gpi, gpo, and uart

    // Initialize module to obtain base address
	XIOModule_Initialize(&iomodule, XPAR_IOMODULE_0_DEVICE_ID);
	XIOModule_Start(&iomodule);

	while(1){
		chars01 = XIOModule_DiscreteRead(&iomodule, 1);
		chars02 = XIOModule_DiscreteRead(&iomodule, 2);

		draw_frame(&chars01, &chars02);

		sleep(1);
	}

    cleanup_platform();
    return 0;
}
